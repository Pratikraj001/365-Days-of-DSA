// ( --- https://leetcode.com/problems/minimum-rounds-to-complete-all-tasks/ --- )


class Solution {
public:
    int minimumRounds(vector<int>& tasks) {
        map<int,int> mp;
        for(int i = 0 ; i < tasks.size() ; i++){
            if(mp.find(tasks[i]) == mp.end()){
                mp[tasks[i]] = 1;
            }
            else{
                mp[tasks[i]]++;
            }
        }
        long count = 0;
        for(auto& it : mp){
            if(it.second < 2){
                return -1;
            }
            int temp = it.second;
            // cout<<temp<<" "<<count<<" ; ";
            // if(temp == 4){
            //     count += 2;
            // }
            int rem = temp%3;
            if(rem == 0){
                count += temp/3;
            }
            else if(rem == 2){
                count += (temp/3 + 1);
            }
            else if(rem == 1){
                temp = temp-4;
                count += (temp/3 + 2);
            }
        }
        return count;
    }
};
