//( --- https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/ --- )



class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int n=nums.size();
        vector<int>ans(2,0);
        // bool leftFound=false,rightFound=false;
        int left=0,right=n-1,mid;
        // int l=-1,r=-1;
        ans[0] = -1;
        ans[1] = -1;
        
        // find left limit
        while(left<=right)
        {
            mid=(left+right)/2;
            
            if(nums[mid]==target)
            {
                if(mid==0 || nums[mid]>nums[mid-1])
                {
                    ans[0] = mid;
                    break;
                }
                else
                {
                    right=mid-1;
                }
            }
            else if(nums[mid]<target)left=mid+1;
            else right=mid-1;
        }
        left=0;
        right=n-1;
         // find right limit
        while(left<=right)
        {
            mid=(left+right)/2;
            
            if(nums[mid]==target)
            {
                if(mid==n-1 || nums[mid]<nums[mid+1])
                {
                    ans[1]=mid;
                    break;
                }
                else
                {
                    left=mid+1;
                }
            }
            else if(nums[mid]<target)left=mid+1;
            else right=mid-1;
        }
        return ans;
    }
};
