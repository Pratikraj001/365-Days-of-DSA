// ( --- https://leetcode.com/problems/search-in-rotated-sorted-array/ --- )



class Solution {
public:
    
    int maxpos(vector<int>nums){
        int n = nums.size();
        int low  =0 , high = n-1 , mid , maxpos = 0;
        while(low <= high){
            mid = (low+high)/2;
            int next = (mid+1)%n , prev = (mid-1+n)%n;
            if(nums[mid] > nums[next]  && nums[mid] >= nums[prev]){
                maxpos = mid;
                break;
            }
            else if(nums[mid] < nums[low]){
                high = mid-1;
            }
            else{
                low = mid+1;
            }
        }
        return maxpos;
    }
    
    int binarySearch(vector<int>nums , int target , int low , int high){
        int mid;
        bool isIn = target >= nums[0];
        
        while(low <= high){
            mid = (low+high)/2;
            if(nums[mid] == target){
                return mid;
            }
            if(isIn){
                if(nums[mid] > target){
                    high = mid-1;
                }
                else{
                    low = mid+1;
                }
            }
            else{
                if(nums[mid] > target){
                    high = mid-1;
                }
                else{
                    low = mid+1;
                }
            }
        }
        return 0;
    }
    int search(vector<int>& nums, int target) {
        int mxxpostion = maxpos(nums);
        
        cout<<mxxpostion;
        
        int ans  = binarySearch(nums , target , 0 , mxxpostion) + binarySearch(nums , target , mxxpostion+1 , nums.size()-1);
        if(ans != 0 || nums[0] == target){
            return ans;
        }
        return -1;
        
       
        
    }
};
